$tiers: common, uncommon, rare, legendary, exotic;
$damage-types: void, solar, arc, stasis, strand;

$colors: (
	background: var(--background-3),
	background-0: #0f0d0d #b2b6bd,
	background-1: #181515 #b2b6bd,
	background-2: #201c1c #b9bec7,
	background-3: #2e2929 #c1c5ce,
	background-4: #3f3a3a #d0d3da,
	background-5: #494444 #dddfe2,
	background-6: #555050 #eaecf0,
	background-7: #747171 #f0f0f0,
	background-8: #858080 #ffffff,
	background-9: #918b8b #ffffff,

	foreground: var(--foreground-1),
	foreground-0: #ffffff #000000,
	foreground-1: #f7f3f3 #222233,
	foreground-2: #ddd8d8 #3a3a55,
	foreground-3: #bdb7b7 #676783,
	foreground-4: #9e9797 #8181a8,
	foreground-5: #7c7474 #a3a3dd,

	accent-0: #58ccff #3792b9,
	accent-0-active: #8adcff,

	good: #58df58,
	bad: #e76b6b,
	warning: #e7b16b,

);

@mixin override-color($name, $color, $opacity: null) {
	$rgba-var: var(--#{$name}-rgb);
	@if type-of($color) == color {
		--#{$name}-rgb: #{red($color), green($color), blue($color)};
		--#{$name}: #{if($opacity == null, $color, rgba($rgba-var, $opacity))};
	} @else if str-starts-with($color, "color(") {
		$referenced-var: str-slice($color, 9, str-length($color) - 1);
		--#{$name}-rgb: var(--#{$referenced-var}-rgb);
		--#{$name}: #{if($opacity == null, var(--#{$referenced-var}), rgba($rgba-var, $opacity))};
	} @else if str-starts-with($color, "var(") {
		$referenced-var: str-slice($color, 7, str-length($color) - 1);
		--#{$name}-rgb: var(--#{$referenced-var}-rgb);
		--#{$name}: #{if($opacity == null, var(--#{$referenced-var}), rgba($rgba-var, $opacity))};
	} @else {
		--#{$name}: #{$color};
		@if $opacity != null {
			@error "Can't use $opacity with this colour"
		}
	}
}

@mixin override-colors($colors) {
	@each $name, $color in $colors {
		@include override-color($name, $color);
	}
}

:root {
	color-scheme: dark;

	@each $name, $val in $colors {
		$color: nth($val, 1);
		@include override-color($name, $color);
	}

	// @media (prefers-color-scheme: light) {
	// 	color-scheme: light;
	// 	@each $var, $val in $colors {
	// 		@if length($val) > 1 {
	// 			$color: nth($val, 2);
	// 			@if type-of($color) == color {
	// 				--#{$var}: #{$color};
	// 				--#{$var}-rgb: #{red($color), green($color), blue($color)};
	// 			} @else if str-starts-with($color, "color(") {
	// 				$referenced-var: str-slice($color, 9, str-length($color) - 1);
	// 				--#{$var}: var(--#{$referenced-var});
	// 				--#{$var}-rgb: var(--#{$referenced-var}-rgb);
	// 			} @else {
	// 				--#{$var}: #{$color};
	// 			}
	// 		}
	// 	}
	// }
}

@function color($name, $opacity: null) {
	@if map-has-key($colors, $name) {
		@if $opacity == null {
			@return var(--#{$name});
		} @else {
			@return rgba(var(--#{$name}-rgb), $opacity);
		}
	}

	@error "Unknown color '#{$name}'";
}

@function color-rgb($name) {
	@if map-has-key($colors, $name) {
		@return var(--#{$name}-rgb);
	}

	@error "Unknown color '#{$name}'";
}
